# *** DO NOT EDIT ***
# Auto-generated from binaryen-c.h
from enum import IntEnum, unique

from nxbinaryen.capi import BinaryenExpressionId
from nxbinaryen.binaryen import lib

__all__ = [
    'ExpressionId',
]


@unique
class ExpressionId(IntEnum):
    ArrayCopy: BinaryenExpressionId = lib.BinaryenArrayCopyId()
    ArrayGet: BinaryenExpressionId = lib.BinaryenArrayGetId()
    ArrayLen: BinaryenExpressionId = lib.BinaryenArrayLenId()
    ArrayNewFixed: BinaryenExpressionId = lib.BinaryenArrayNewFixedId()
    ArrayNew: BinaryenExpressionId = lib.BinaryenArrayNewId()
    ArrayNewSeg: BinaryenExpressionId = lib.BinaryenArrayNewSegId()
    ArraySet: BinaryenExpressionId = lib.BinaryenArraySetId()
    AtomicCmpxchg: BinaryenExpressionId = lib.BinaryenAtomicCmpxchgId()
    AtomicFence: BinaryenExpressionId = lib.BinaryenAtomicFenceId()
    AtomicNotify: BinaryenExpressionId = lib.BinaryenAtomicNotifyId()
    AtomicRMW: BinaryenExpressionId = lib.BinaryenAtomicRMWId()
    AtomicWait: BinaryenExpressionId = lib.BinaryenAtomicWaitId()
    Binary: BinaryenExpressionId = lib.BinaryenBinaryId()
    Block: BinaryenExpressionId = lib.BinaryenBlockId()
    BrOn: BinaryenExpressionId = lib.BinaryenBrOnId()
    Break: BinaryenExpressionId = lib.BinaryenBreakId()
    Call: BinaryenExpressionId = lib.BinaryenCallId()
    CallIndirect: BinaryenExpressionId = lib.BinaryenCallIndirectId()
    CallRef: BinaryenExpressionId = lib.BinaryenCallRefId()
    Const: BinaryenExpressionId = lib.BinaryenConstId()
    DataDrop: BinaryenExpressionId = lib.BinaryenDataDropId()
    Drop: BinaryenExpressionId = lib.BinaryenDropId()
    GlobalGet: BinaryenExpressionId = lib.BinaryenGlobalGetId()
    GlobalSet: BinaryenExpressionId = lib.BinaryenGlobalSetId()
    I31Get: BinaryenExpressionId = lib.BinaryenI31GetId()
    I31New: BinaryenExpressionId = lib.BinaryenI31NewId()
    If: BinaryenExpressionId = lib.BinaryenIfId()
    Invalid: BinaryenExpressionId = lib.BinaryenInvalidId()
    Load: BinaryenExpressionId = lib.BinaryenLoadId()
    LocalGet: BinaryenExpressionId = lib.BinaryenLocalGetId()
    LocalSet: BinaryenExpressionId = lib.BinaryenLocalSetId()
    Loop: BinaryenExpressionId = lib.BinaryenLoopId()
    MemoryCopy: BinaryenExpressionId = lib.BinaryenMemoryCopyId()
    MemoryFill: BinaryenExpressionId = lib.BinaryenMemoryFillId()
    MemoryGrow: BinaryenExpressionId = lib.BinaryenMemoryGrowId()
    MemoryInit: BinaryenExpressionId = lib.BinaryenMemoryInitId()
    MemorySize: BinaryenExpressionId = lib.BinaryenMemorySizeId()
    Nop: BinaryenExpressionId = lib.BinaryenNopId()
    Pop: BinaryenExpressionId = lib.BinaryenPopId()
    RefAs: BinaryenExpressionId = lib.BinaryenRefAsId()
    RefCast: BinaryenExpressionId = lib.BinaryenRefCastId()
    RefEq: BinaryenExpressionId = lib.BinaryenRefEqId()
    RefFunc: BinaryenExpressionId = lib.BinaryenRefFuncId()
    RefIsNull: BinaryenExpressionId = lib.BinaryenRefIsNullId()
    RefNull: BinaryenExpressionId = lib.BinaryenRefNullId()
    RefTest: BinaryenExpressionId = lib.BinaryenRefTestId()
    Rethrow: BinaryenExpressionId = lib.BinaryenRethrowId()
    Return: BinaryenExpressionId = lib.BinaryenReturnId()
    SIMDExtract: BinaryenExpressionId = lib.BinaryenSIMDExtractId()
    SIMDLoad: BinaryenExpressionId = lib.BinaryenSIMDLoadId()
    SIMDLoadStoreLane: BinaryenExpressionId = lib.BinaryenSIMDLoadStoreLaneId()
    SIMDReplace: BinaryenExpressionId = lib.BinaryenSIMDReplaceId()
    SIMDShift: BinaryenExpressionId = lib.BinaryenSIMDShiftId()
    SIMDShuffle: BinaryenExpressionId = lib.BinaryenSIMDShuffleId()
    SIMDTernary: BinaryenExpressionId = lib.BinaryenSIMDTernaryId()
    Select: BinaryenExpressionId = lib.BinaryenSelectId()
    Store: BinaryenExpressionId = lib.BinaryenStoreId()
    StringAs: BinaryenExpressionId = lib.BinaryenStringAsId()
    StringConcat: BinaryenExpressionId = lib.BinaryenStringConcatId()
    StringConst: BinaryenExpressionId = lib.BinaryenStringConstId()
    StringEncode: BinaryenExpressionId = lib.BinaryenStringEncodeId()
    StringEq: BinaryenExpressionId = lib.BinaryenStringEqId()
    StringIterMove: BinaryenExpressionId = lib.BinaryenStringIterMoveId()
    StringIterNext: BinaryenExpressionId = lib.BinaryenStringIterNextId()
    StringMeasure: BinaryenExpressionId = lib.BinaryenStringMeasureId()
    StringNew: BinaryenExpressionId = lib.BinaryenStringNewId()
    StringSliceIter: BinaryenExpressionId = lib.BinaryenStringSliceIterId()
    StringSliceWTF: BinaryenExpressionId = lib.BinaryenStringSliceWTFId()
    StringWTF16Get: BinaryenExpressionId = lib.BinaryenStringWTF16GetId()
    StringWTF8Advance: BinaryenExpressionId = lib.BinaryenStringWTF8AdvanceId()
    StructGet: BinaryenExpressionId = lib.BinaryenStructGetId()
    StructNew: BinaryenExpressionId = lib.BinaryenStructNewId()
    StructSet: BinaryenExpressionId = lib.BinaryenStructSetId()
    Switch: BinaryenExpressionId = lib.BinaryenSwitchId()
    TableGet: BinaryenExpressionId = lib.BinaryenTableGetId()
    TableGrow: BinaryenExpressionId = lib.BinaryenTableGrowId()
    TableSet: BinaryenExpressionId = lib.BinaryenTableSetId()
    TableSize: BinaryenExpressionId = lib.BinaryenTableSizeId()
    Throw: BinaryenExpressionId = lib.BinaryenThrowId()
    Try: BinaryenExpressionId = lib.BinaryenTryId()
    TupleExtract: BinaryenExpressionId = lib.BinaryenTupleExtractId()
    TupleMake: BinaryenExpressionId = lib.BinaryenTupleMakeId()
    Unary: BinaryenExpressionId = lib.BinaryenUnaryId()
    Unreachable: BinaryenExpressionId = lib.BinaryenUnreachableId()
